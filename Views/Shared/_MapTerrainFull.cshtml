@model Flythrough.Models.FlythroughModel
@using Flythrough.Models

<head>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.js"></script>
    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <style>

        #map {
            border: 1px solid #ddd;
            padding: 1px;
            border-radius: 4px;
            width: 100%;
            height: 100%;
        }

        .mapContainer {
            height: 100%;
            width: 100%;
        }

        .holdingContainer {
            height: 500px;
            width: 800px;
        }
    </style>
</head>
<br />
<div class="holdingContainer">
    <div class="mapContainer">
        <div id="map" class="row"></div>
    </div>
</div>
@{

    List<double[]> cameraLngLat = new List<double[]>();
    List<double[]> targetLngLat = new List<double[]>();
    List<double> groundElevations = Model.Cameras.Select(x => x.GroundElevation).ToList();
    List<double> elevations = Model.Cameras.Select(x => x.Elevation).ToList();
    for (int i = 0; i < Model.Cameras.Count(); i++)
    {

        double[] clnglat = Model.Cameras.OrderBy(x => x.Id).ElementAt(i).GetCameraLngLat();
        cameraLngLat.Add(clnglat);

        double[] tlnglat = Model.Cameras.OrderBy(x => x.Id).ElementAt(i).GetTargetLngLat();
        targetLngLat.Add(tlnglat);
    }

    var lastIndex = cameraLngLat.Count()-1;
    var startLngLat = cameraLngLat[0];
    var finishLngLat = cameraLngLat[lastIndex]; ;

    var zoom = 15;
    var startBearing = 0;

    var exagerexaggeration = 1.85;
    var tileSize = 512;

}
<script>
    function GetDistanceTo(lnglat1, lnglat2) {
        const R = 6371e3; // metres
        const φ1 = lnglat1[1] * Math.PI / 180; // φ, λ in radians
        const φ2 = lnglat2[1] * Math.PI / 180;
        const Δφ = (lnglat2[1] - lnglat1[1]) * Math.PI / 180;
        const Δλ = (lnglat2[0] - lnglat1[0]) * Math.PI / 180;

        const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
            Math.cos(φ1) * Math.cos(φ2) *
            Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c; // in metres
    }

    function GetBearingTo(lnglat1, lnglat2) {
        const y = Math.sin(lnglat2[1] - lnglat1[1]) * Math.cos(lnglat2[0]);
        const x = Math.cos(lnglat1[0]) * Math.sin(lnglat2[0]) -
            Math.sin(lnglat1[0]) * Math.cos(lnglat2[0]) * Math.cos(lnglat2[1] - lnglat1[1]);
        const θ = Math.atan2(y, x);
        return (θ * 180 / Math.PI + 360) % 360; // in degrees
    }

    $(document).ready(function () {
        mapboxgl.accessToken = 'pk.eyJ1IjoidGhlcGhvZW5peDI1IiwiYSI6ImNrbTR6M3h0bzA5ZXgyeGtuY2ZnMjB6cnoifQ.lvIzFpjHc1uKMGWWywoUNA';
        var startLngLat = @Html.Raw(Json.Encode(startLngLat));
        var finishLngLat = @Html.Raw(Json.Encode(finishLngLat));
        var nextLngLat = @Html.Raw(Json.Encode(cameraLngLat[1]));
        var zoom = @Html.Raw(Json.Encode(zoom));
        var map = new mapboxgl.Map({
            container: 'map',
            zoom: zoom,
            center: startLngLat,
            pitch: 50,
            bearing: GetBearingTo(startLngLat, nextLngLat),
            style: 'mapbox://styles/mapbox/satellite-v9',
            interactive: false
        });

        // add terrain and sky layers once the style has loaded
        map.on('load', function () {
            map.addSource('mapbox-dem', {
                'type': 'raster-dem',
                'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
                'tileSize': @tileSize,
                'maxzoom': 12
            });
            map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': @exagerexaggeration });

            map.addLayer({
                'id': 'sky',
                'type': 'sky',
                'paint': {
                    'sky-type': 'atmosphere',
                    'sky-atmosphere-sun': [0.0, 90.0],
                    'sky-atmosphere-sun-intensity': 15
                }
            });
        });

        function updateCameraPosition(position, altitude, target) {
            var camera = map.getFreeCameraOptions();

            camera.position = mapboxgl.MercatorCoordinate.fromLngLat(
                position,
                altitude
            );
            camera.lookAtPoint(target);

            map.setFreeCameraOptions(camera);
        }

        var animationIndex = 0;
        var animationTime = 0.0;

        // wait for the terrain and sky to load before starting animations
        map.on('idle', function () {
            // linearly interpolate between two altitudes/positions based on time
            var lerp = function (a, b, t) {
                if (Array.isArray(a) && Array.isArray(b)) {
                    var result = [];
                    for (var i = 0; i < Math.min(a.length, b.length); i++)
                        result[i] = a[i] * (1.0 - t) + b[i] * t;
                    return result;
                } else {
                    return a * (1.0 - t) + b * t;
                }
            };

            var cameraLngLat = @Html.Raw(Json.Encode(cameraLngLat));
            var targetLngLat = @Html.Raw(Json.Encode(targetLngLat));
            var groundElevations = @Html.Raw(Json.Encode(groundElevations));
            var elevations = @Html.Raw(Json.Encode(elevations));
            var lastIndex = cameraLngLat.length - 1;
            console.log("We have " + cameraLngLat.length + " stops and " + groundElevations.length + " ground elevations 1 is " + groundElevations[0]);
            var dur = 1200;

            var flightHeight = 800;
            var lowHeight = 200;
            var animations = [
                {
                    duration: dur,
                    animate: function (phase) {
                        var easeInOutQuad = function (t) {
                            return t < 0.5
                                ? 2.0 * t * t
                                : (4.0 - 2.0 * t) * t - 1.0;
                        };
                        var start = cameraLngLat[0];
                        var end = cameraLngLat[1];
                        var alt = [groundElevations[0] + elevations[0], groundElevations[1] + elevations[1]];
                        var target1 = targetLngLat[0];
                        var target2 = targetLngLat[1];

                        // interpolate camera position while keeping focus on a target lat/lng
                        var position = lerp(start, end, easeInOutQuad(phase));
                        var altitude = lerp(alt[0], alt[1], easeInOutQuad(phase));
                        var target = lerp(target1, target2, easeInOutQuad(phase));

                        updateCameraPosition(position, altitude, target);
                    }
                },
                {
                    duration: dur,
                    animate: function (phase) {
                        var easeInOutQuad = function (t) {
                            return t < 0.5
                                ? 2.0 * t * t
                                : (4.0 - 2.0 * t) * t - 1.0;
                        };
                        var start = cameraLngLat[1];
                        var end = cameraLngLat[2];
                        var alt = [groundElevations[1] + elevations[1], groundElevations[2] + elevations[2]];
                        var target1 = targetLngLat[1];
                        var target2 = targetLngLat[2];

                        // interpolate both the camera position and target
                        var position = lerp(start, end, easeInOutQuad(phase));
                        var altitude = lerp(alt[0], alt[1], easeInOutQuad(phase));
                        var target = lerp(target1, target2, easeInOutQuad(phase));

                        updateCameraPosition(position, altitude, target);
                    }
                },
                {
                    duration: dur,
                    animate: function (phase) {
                        var easeInOutQuad = function (t) {
                            return t < 0.5
                                ? 2.0 * t * t
                                : (4.0 - 2.0 * t) * t - 1.0;
                        };
                        var start = cameraLngLat[2];
                        var end = cameraLngLat[3];
                        var alt = [groundElevations[2] + elevations[2], groundElevations[3] + elevations[3]];
                        var target1 = targetLngLat[2];
                        var target2 = targetLngLat[3];

                        // interpolate both the camera position and target
                        var position = lerp(start, end, easeInOutQuad(phase));
                        var altitude = lerp(alt[0], alt[1], easeInOutQuad(phase));
                        var target = lerp(target1, target2, easeInOutQuad(phase));

                        updateCameraPosition(position, altitude, target);
                    }
                },
                {
                    duration: dur,
                    animate: function (phase) {
                        // create easing function for the animation
                        var easeInOutQuad = function (t) {
                            return t < 0.5
                                ? 2.0 * t * t
                                : (4.0 - 2.0 * t) * t - 1.0;
                        };
                        var start = cameraLngLat[3];
                        var end = cameraLngLat[4];
                        var alt = [groundElevations[3] + elevations[3], groundElevations[4] + elevations[4]];
                        var target1 = targetLngLat[3];
                        var target2 = targetLngLat[4];

                        // interpolate both the camera position and target
                        var position = lerp(start, end, easeInOutQuad(phase));
                        var altitude = lerp(alt[0], alt[1], easeInOutQuad(phase));
                        var target = lerp(target1, target2, easeInOutQuad(phase));

                        updateCameraPosition(position, altitude, target);
                    }
                },
                {
                    duration: dur,
                    animate: function (phase) {
                        // create easing function for the animation
                        var easeInOutQuad = function (t) {
                            return t < 0.5
                                ? 2.0 * t * t
                                : (4.0 - 2.0 * t) * t - 1.0;
                        };
                        var start = cameraLngLat[4];
                        var end = cameraLngLat[5];
                        var alt = [groundElevations[4] + elevations[4], groundElevations[5] + elevations[5]];
                        var target1 = targetLngLat[4];
                        var target2 = targetLngLat[5];

                        // interpolate both the camera position and target
                        var position = lerp(start, end, easeInOutQuad(phase));
                        var altitude = lerp(alt[0], alt[1], easeInOutQuad(phase));
                        var target = lerp(target1, target2, easeInOutQuad(phase));

                        updateCameraPosition(position, altitude, target);
                    }
                },
                {
                    duration: dur,
                    animate: function (phase) {
                        // create easing function for the animation
                        var easeInOutQuad = function (t) {
                            return t < 0.5
                                ? 2.0 * t * t
                                : (4.0 - 2.0 * t) * t - 1.0;
                        };
                        var start = cameraLngLat[5];
                        var end = cameraLngLat[0];
                        var alt = [groundElevations[5] + elevations[5], groundElevations[0] + elevations[0]];
                        var target1 = targetLngLat[5];
                        var target2 = targetLngLat[0];

                        // interpolate both the camera position and target
                        var position = lerp(start, end, easeInOutQuad(phase));
                        var altitude = lerp(alt[0], alt[1], easeInOutQuad(phase));
                        var target = lerp(target1, target2, easeInOutQuad(phase));

                        updateCameraPosition(position, altitude, target);
                    }
                }
            ];
            var lastTime = 0.0;
            function frame(time) {
                animationIndex %= animations.length;
                var current = animations[animationIndex];

                if (animationTime < current.duration) {
                    current.animate(animationTime / current.duration);
                }

                // allow requestAnimationFrame to control the speed of the animation
                animationTime += 1 / (time - lastTime);
                lastTime = time;

                if (animationTime > current.duration) {
                    animationIndex++;
                    animationTime = 0.0;
                }

                window.requestAnimationFrame(frame);
            }

            window.requestAnimationFrame(frame);
        });
    });
</script>
