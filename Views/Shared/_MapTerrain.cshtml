@model GroundElevation.Models.HomeViewModel


<head>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.js"></script>
    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <style>

        #map {
            border: 1px solid #ddd;
            padding: 1px;
            border-radius: 4px;
            width: 100%;
            height: 100%;
        }

        .mapContainer {
            height: 450px;
            width: 800px;
            margin-left: auto;
            margin-right: auto;
            display: none;
        }

        .holdingContainer {
            height: 450px;
            width: 100%;
        }
    </style>
</head>
<br />
<div class="holdingContainer">
    <div class="mapContainer">
        <div id="map" class="row"></div>
    </div>
</div>
@{
    var startLng = Model.StartCoordsLng;
    var startLat = Model.StartCoordsLat;
    var finishLng = Model.FinishCoordsLng;
    var finishLat = Model.FinishCoordsLat;
    var midLng = Model.MidCoordLng;
    var midLat = Model.MidCoordLat;
    var totalDistance = Model.TotalDistance;
    var numUp = (totalDistance * 1000);
    var zoom = numUp * 0.69;
    var originLng = startLng;
    var originLat = startLat;
    var midBearing = 50;


    var scaler = 0.005;
    var latBound1 = midLat - scaler;
    var lngBound1 = midLng - scaler;
    var latBound2 = midLat + scaler;
    var lngBound2 = midLng + scaler;


}
<script>
    $(document).ready(function () {

        var loadedCount = 0;
        mapboxgl.accessToken = 'pk.eyJ1IjoidGhlcGhvZW5peDI1IiwiYSI6ImNrbTR6M3h0bzA5ZXgyeGtuY2ZnMjB6cnoifQ.lvIzFpjHc1uKMGWWywoUNA';
        var zoom = @zoom;
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/thephoenix25/ckm7lc2nj4ibd17q3tltlvz47',
            center: [@midLng, @midLat],
            zoom: zoom,
            pitch: 65,
            bearing: @midBearing,
            bounds : [
            [@lngBound1, @latBound1], // [west, south]
            [@lngBound2, @latBound2]  // [east, north]
        ]
        });

        //50.758736732846785, -1.983127781139956	50.77809984376799, -1.977283557031626


        map.on('load', function () {
            map.addSource('mapbox-dem', {
                'type': 'raster-dem',
                'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
                'tileSize':128,
                'maxzoom': 12
            });

            // add the DEM source as a terrain layer with exaggerated height
            map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 4.8 });

            // add a sky layer that will show when the map is highly pitched
            map.addLayer({
                'id': 'sky',
                'type': 'sky',
                'paint': {
                    'sky-type': 'atmosphere',
                    'sky-atmosphere-sun': [0.0, 0.0],
                    'sky-atmosphere-sun-intensity': 15
                }
            });
            map.addLayer({
                'id': '3d-buildings',
                'source': 'composite',
                'source-layer': 'building',
                'filter': ['==', 'extrude', 'true'],
                'type': 'fill-extrusion',
                'minzoom': 17,
                'paint': {
                    'fill-extrusion-color': '#aaa',

                    // use an 'interpolate' expression to add a smooth transition effect to the
                    // buildings as the user zooms in
                    'fill-extrusion-height': [
                        'interpolate',
                        ['linear'],
                        ['zoom'],
                        15,
                        0,
                        15.05,
                        ['get', 'height']
                    ],
                    'fill-extrusion-base': [
                        'interpolate',
                        ['linear'],
                        ['zoom'],
                        15,
                        0,
                        15.05,
                        ['get', 'min_height']
                    ],
                    'fill-extrusion-opacity': 0.6
                }
            });
            // Add 3d buildings and remove label layers to enhance the map
            var layers = map.getStyle().layers;
            for (var i = 0; i < layers.length; i++) {
                if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {
                    // remove text labels
                    map.removeLayer(layers[i].id);
                }
            }
        });
        map.on('click', function () {
            console.log("clicked, stopping rotation");
            map.stop();
            map.flyTo({
                center: [@midLng, @midLat],
                zoom: zoom,
                speed: 0.4,
                curve: 2,
                easing(t) {
                    return t;
                }
            });
        });
        var rotating = true;
        map.on('moveend', function () {
            if (rotating == false) {
                console.log("moveend - start rotating - bearing = " + map.getBearing());
                @*if (map.getBearing() != @midBearing) {

                    map.rotateTo(@midBearing)

                }*@
                rotating = true;
                // Start the animation.
                rotateCamera(0);

                $('.mapContainer').show();
                map.resize();
            }
        });
        loaded = false;
        var loaded = false;
        map.on('sourcedata', function (e) {
            if (e.isSourceLoaded) {
                //console.log("isloaded");
                if (!loaded) {
                    console.log("isloaded");
                    loadedCount = loadedCount + 1;
                    if (loadedCount > 1) {
                        loaded = true;
                        rotating = false;
                        rotateCamera(0);
                        @*// Fly to location
                        map.flyTo({
                            center: [@midLng, @midLat],
                            zoom: zoom,
                            speed: 0.5,
                            curve: 2,
                            easing(t) {
                                return t;
                            }
                        })*@
                    }
                }
            }
        });

                var startMarker = new mapboxgl.Marker({
                color: "#00FF00",
                draggable: true
            })
                .setLngLat([@startLng, @startLat])
                .addTo(map);

            var finishMarker = new mapboxgl.Marker({
                color: "#FF0000",
                draggable: true
            })
                .setLngLat([@finishLng, @finishLat])
            .addTo(map);
        function rotateCamera(timestamp) {
            // clamp the rotation between 0 -360 degrees
            // Divide timestamp by 100 to slow rotation to ~10 degrees / sec
            map.rotateTo((timestamp / 200) % 360, { duration: 0 });
            // Request the next frame of the animation.
            requestAnimationFrame(rotateCamera);
        }
    });
</script>
