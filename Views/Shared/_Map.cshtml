@model Flythrough.Models.HomeViewModel

<head>
    
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.1.1/mapbox-gl.js"></script>
    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <style>
        #map {
            border: 1px solid #ddd;
            padding: 1px;
            border-radius: 4px;
            width: 100%;
            height: 100%;
        }

        .mapContainer {
            width: 800px;
            height: 800px;
            margin-left: auto;
            margin-right: auto;
        }

        .wayPoints {
            display: block;
            margin: 0px auto;
            width: 90%;
            padding: 10px;
            border: none;
            border-radius: 3px;
            font-size: 12px;
            text-align: center;
            color: #222;
            background: #fff;
        }

        .container {
            width: 100%;
            height: 100%;
        }

        .sideBar {
            float: right;
            width: 25%;
            height: 80%;
            border-radius: 5px;
            border: thin solid gray;
            background-color: rgba(0,0,0,0.2);
        }
    </style>
</head>
<div class="mapContainer">
    <div id="map"></div>
</div>


@{
    var midLng = -1.971;
    var midLat = 51.11;
    var zoom = 12;
    var pitch = 45;
    var bearing = 80;
    
}

<script>

    $(document).ready(function () {
        var isCameraClick = true;
        var waypointCount = 0;


        
        function CreateNewWaypoint(lng, lat) {
            var input = document.createElement("input");
            input.type = "text";
            input.className = "waypoint form-control"; // set the CSS class
            input.setAttribute("id", "waypoint_" + waypointCount);
            input.setAttribute("value", lng + ',' + lat);
            waypointCount = waypointCount + 1;
            document.getElementById('waypoints').appendChild(input);

        }
        function CreateCameraMarker(lng, lat) {
            return new mapboxgl.Marker({
                color: "#FF0000",
                draggable: true
            })
                .setLngLat([lng, lat])
                .addTo(map);
        }
        function CreateTargetMarker(lng, lat) {
            var marker = new mapboxgl.Marker({
                color: "#00FF00",
                draggable: true
            })
                .setLngLat([lng, lat])
                .addTo(map).on('dragend', onCameraDragEnd);
        }
        function onCameraDragEnd() {
            var lngLat = this.getLngLat();

            var coordsText = lngLat.lat + "," + lngLat.lng;
            console.log("camera id = " + this.id + " coords : " + coordsText);
        };
        function onTargetDragEnd() {
            var lngLat = startMarker.getLngLat();
            var coordsText = lngLat.lat + "," + lngLat.lng;
            startCoords.value = coordsText;
        };
            @*var startMarker = new mapboxgl.Marker({
                color: "#00FF00",
                draggable: true
            })
                .setLngLat([@startLng, @startLat])
                .addTo(map);

            var finishMarker = new mapboxgl.Marker({
                color: "#FF0000",
                draggable: true
            })
                .setLngLat([@finishLng, @finishLat])
                .addTo(map);

            var startCoords = document.getElementById('StartCoords');
            var finishCoords = document.getElementById('FinishCoords');

            function onStartDragEnd() {
                var lngLat = startMarker.getLngLat();
                var coordsText = lngLat.lat + "," + lngLat.lng;
                startCoords.value = coordsText;
            };
            function onFinishDragEnd() {
                var lngLat = finishMarker.getLngLat();
                var coordsText = lngLat.lat + "," + lngLat.lng;
                finishCoords.value = coordsText;
            };

            startMarker.on('dragend', onStartDragEnd);
            finishMarker.on('dragend', onFinishDragEnd);*@


            mapboxgl.accessToken = 'pk.eyJ1IjoidGhlcGhvZW5peDI1IiwiYSI6ImNrbTR6M3h0bzA5ZXgyeGtuY2ZnMjB6cnoifQ.lvIzFpjHc1uKMGWWywoUNA';
            var map = new mapboxgl.Map({
                container: 'map',
                zoom: @zoom,
                center: [@midLng, @midLat],
                pitch: @pitch,
                bearing: @bearing,
                style: 'mapbox://styles/mapbox/outdoors-v11',                
            });
        map.on('click', function (e) {
            console.log('A click event has occurred at ' + e.lngLat);
            
            var lngLat = e.lngLat;
            console.log('A click event has occurred at ' + lngLat);
            var lng = lngLat.lng;
            var lat = lngLat.lat;
            if (isCameraClick) {
                CreateCameraMarker(lng, lat);
                CreateNewWaypoint(lng, lat);
                isCameraClick = false;
            }
            else {
                CreateTargetMarker(lnglat.lng, lnglat.lat);
                isCameraClick = true;
            }

        });















            //map.on('load', function () {
            //    map.addSource('mapbox-dem', {
            //        'type': 'raster-dem',
            //        'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',
            //        'tileSize': 512,
            //        'maxzoom': 17
            //    });
            //    // add the DEM source as a terrain layer with exaggerated height
            //    map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1 });

            //    // add a sky layer that will show when the map is highly pitched
            //    map.addLayer({
            //        'id': 'sky',
            //        'type': 'sky',
            //        'paint': {
            //            'sky-type': 'atmosphere',
            //            'sky-atmosphere-sun': [0.0, 0.0],
            //            'sky-atmosphere-sun-intensity': 15
            //        }
            //    });
            //});

        //map.addControl(new mapboxgl.GeolocateControl({
        //    positionOptions: {
        //        enableHighAccuracy: true
        //    },
        //    trackUserLocation: true
        //}));
        //var scale = new mapboxgl.ScaleControl({
        //    maxWidth: 80,
        //    unit: 'imperial'
        //});
        //map.addControl(scale);

        //scale.setUnit('metric');
        //map.boxZoom.enable();


        });
</script>
